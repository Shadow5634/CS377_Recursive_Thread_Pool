1] Don't forget to use -lpthread -pthread flags for compiling

2] CLARIFY RECURMUTEX UNLOCK FUNCTION - how to decide # locks for #globals
3] DISCUSS THE DIFFERENCE BETWEEN SIGNAL AND BROADCAST
4] SEEMS LIKE I AM HAVING TO USE CONDITION VARIABLES TO IMPLEMENT CONDITION VARIABLES
    - should i be using sem_wait and post and spin lock protections instead?

cond wait working with recurnotes
change into classes to make it possible to create multiple of them
encase tid and count into one structure and one lock for the entire structure

// ASSUMPTIONS:
// you can utilize all the POSIX thread functions
// note however that you can't use them to create recursive mutexes for you
// you must use them to create non-recursive mutexes and proceed to implement behaviour
// characteristic of recursive locks

// feel free to create as many global variables as you like
// hints
  // you need to be able distinguish between thread that has lock and those that don't
  // you need to implement a mechanism to keep track of how many times the thread has acquired the lock
  // after it has the first time
  // for globals you create think about how multiple threads accessing affects it

  // // block all signals except SIGUSR1
// // do you want to unblock them later on or leave that up to the user of these functions
// sigset_t full, usr2;
// sigfillset(&full);
// sigprocmask(SIG_BLOCK, &full, NULL);
// sigemptyset(&usr2);
// sigaddset(&usr2, SIGUSR2);
// sigprocmask(SIG_UNBLOCK, &(this->user_sig), NULL);
// sigprocmask(SIG_UNBLOCK, &usr2, NULL);
// // 3 - put thread to sleep until SIGUSR1 received (ensure no locks have been acquired)
// sigwaitinfo(&(this->user_sig), NULL);
// // sigprocmask(SIG_UNBLOCK, &full, NULL);

// ANSWER START

// NOTE:
// i have used two different mutex for tid and count
// this only benefits unlock however since thats the only place the two are not read togher
// both locking functions have to consider count irrespective of tid mathcing or not

// it might be possible to use @currThreadID = -1 to signal that lock is free to be acquired
// in this case it acts as the mutex to be utilized for condition variables

// it does not seem to be the case but think about whether these functions must be atomic
// ANSWER END

need additional functions for testing to keep class level variables as private