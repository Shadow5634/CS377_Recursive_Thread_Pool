Having locks for each variable one common one
Having recursive works work with pthread_cond_wait()
should i go for unordered map or stick to lists for ease of use
for what scope should i change handler of SIGUSR1 to do nothing of importance
how should i check if a thread is sleeping wo forcing studenets to create public values

which signals to block and which to not
when should you unblock them
could you ignore all signals (except SIGUSR1) before sleeping and later on switch them back to default
this assumes that if one signal is delivered than all must be

deciding to use sigusr2 as well for testing???

Had to switch to more portable sigaction since its the recommended approach
Intellisense gives wrong suggestion that does not compile - be careful???/

Just assumed that pthread_signal wakes up one thread - the first in the list for O(1) complexity
Signal dispositions are process wide
using sigwait instead of pause to more directly get the signal number instead of using handlers
how do i ensure that singal that is sent through signal/broadcast functions does not get missed
cant seem to check if current thread holds the lock (need a wrapper) [cond_var_wait]

If multiple threads of a process are blocked waiting for the same
       signal(s) in sigwaitinfo() or sigtimedwait(), then exactly one of
       the threads will actually receive the signal if it becomes
       pending for the process as a whole; which of the threads receives
       the signal is indeterminate


* Seems to be the case that sigwaitinfo gets interrupted by other singals as well
* Seems to be the case that pthread_cond_wait gets interrupted by other signals as well
* but i want to test that a thread has actually gone to sleep until SIGUSR1 received

* that does not seem possible however
* instead have a handler for all signals that just sets a global variable to the signal received
* and keep sigwait until the global variable changes to SIGUSR1
* but this disregards other important singals that should generally not be ignored

****sigwaitinfo does not execute the signal handler****

// 1 - pause, 2 - nanosleep, 3 - sched_yield
// might want to check out sigwaitinfo and sigprocmask
// need to research more about blocked and non-blocked signals
// for now consider pause
// you will need a variable to confirm that the condVar for init and the one used for the other methods is the same
// you will need a singal handler for SIGUSR1 [default is to terminate which you don't want to occur]
// you could incorporate a bounded buffer here
// since you will need to keep track of which threads are sleeping on the condition to wake them up
  // this will require additional condition variables and mutexes

/////////////////////////
     QUESTIONS
/////////////////////////

* Difference between signal and broadcast and how do i choose between the two
* How should I go about deciding whether helpers should be part of class (same_thread, signal handlers)
* How should I use gdb for threaded debugging

* Explain man page of pthread_cond_wait
* is this telling me to block first and then release the lock??
These functions atomically release mutex and cause the calling
thread to block on the condition variable cond; atomically here
means ``atomically with respect to access by another thread to
the mutex and then the condition variable''. That is, if another
thread is able to acquire the mutex after the about-to-block
thread has released it, then a subsequent call to
pthread_cond_broadcast() or pthread_cond_signal() in that thread
shall behave as if it were issued after the about-to-block thread
has blocked.